from decimal import Decimal

from defabipedia import Chain
from karpatkit.constants import Address
from web3 import Web3

from defyes.functions import ensure_a_block_number

from .autogenerated import DepositPool, StakingPoolManager


class StakingPoolManager(StakingPoolManager):
    default_addresses: dict[str, str] = {
        Chain.ETHEREUM: "0xcf5EA1b38380f6aF39068375516Daf40Ed70D299",
    }


def get_protocol_data_for(
    blockchain: str, wallet: str, lptoken_address: str, block: int | str = "latest", decimals: bool = True
) -> dict:
    block_id = ensure_a_block_number(block, blockchain)
    wallet = Web3.to_checksum_address(wallet)

    ret = {
        "blockchain": blockchain,
        "block_id": block_id,
        "protocol": "Stader",
        "version": 0,
        "wallet": wallet,
        "positions": {},
        "positions_key": "lptoken_address",
    }

    if isinstance(lptoken_address, str):
        lptoken_address = [lptoken_address]

    for lptoken_addr in lptoken_address:
        lptoken_addr = Web3.to_checksum_address(lptoken_addr)
        position = {}

        dp = DepositPool(blockchain, block_id, lptoken_addr)
        balance = dp.balance_of(wallet)
        if balance:
            pool_manager = StakingPoolManager(blockchain, block_id)
            underlying_balance = pool_manager.convert_to_assets(balance)
            position = {
                "liquidity": {
                    "holdings": [
                        {"address": lptoken_addr, "balance": balance / Decimal(10**dp.decimals if decimals else 1)}
                    ],
                    "underlyings": [
                        {
                            "address": Address.ZERO,
                            "balance": underlying_balance / Decimal(10**dp.decimals if decimals else 1),
                        }
                    ],
                }
            }

        ret["positions"][lptoken_addr] = position
    return ret
