from decimal import Decimal

from defabipedia import Chain
from karpatkit.constants import Address
from web3 import Web3

from defyes.functions import ensure_a_block_number
from defyes.types import Token, TokenAmount

from .autogenerated import DepositPool, StakingPoolManager


class StakingPoolManager(StakingPoolManager):
    default_addresses: dict[str, str] = {
        Chain.ETHEREUM: "0xcf5EA1b38380f6aF39068375516Daf40Ed70D299",
    }


def get_protocol_data_for(
    blockchain: str, wallet: str, lptoken_address: str, block: int | str = "latest", decimals: bool = True
) -> dict:
    block_id = ensure_a_block_number(block, blockchain)
    wallet = Web3.to_checksum_address(wallet)
    lptoken_address = Web3.to_checksum_address(lptoken_address)

    data = {'holdings': [], 'underlyings': [], 'unclaimed_rewards': [], 'financial_metrics': {}}

    dp = DepositPool(blockchain, block_id, lptoken_address)
    token = Token.get_instance(lptoken_address, blockchain, block_id)
    balance = dp.balance_of(wallet)
    if balance:
        data["holdings"] = [TokenAmount.from_teu(balance, token)]
        pool_manager = StakingPoolManager(blockchain, block_id)
        underlying_balance = int(pool_manager.convert_to_assets(balance))
        data["underlyings"] = [TokenAmount.from_teu(underlying_balance, Token(Address.ZERO, blockchain, block_id))]

    return data
